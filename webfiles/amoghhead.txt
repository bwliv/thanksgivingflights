    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="X-UA-Compatible" content="ie=edge" />
    <title>Thanksgiving Flight Delays</title>
    <script type="text/javascript">
      $(document).ready(function(){
carrier_mapping={"9E": "Endeavor Air",
                    "EV": "ExpressJet",
                    "G4": "Allegiant",
                    "HA": "Hawaiian",
                    "MQ": "Envoy",
                    "OH": "PSA",
                    "OO": "SkyWest",
                    "VX": "Virgin America",
                    "YV": "Mesa",
                    "YX": "Republic",
                    "AA": "American",
                    "AS": "Alaska",
                    "B6": "JetBlue",
                    "DL": "Delta",
                    "F9": "Frontier",
                    "NK": "Spirit",
                    "UA": "United",
                    "WN": "Southwest"}

    const rawSample = JSON.parse(JSON.stringify(data))
    var originArr = [];
    var destArr = [];
    var origin_duplicate = [];
    var dest_duplicate = [];
    rawSample.forEach(function(item){
      var i = originArr.findIndex(x => x.id == item.ORIGIN);
      var j = destArr.findIndex(x => x.id == item.DEST);
     
      origin_key = item.ORIGIN_CITY_NAME.concat(" (").concat(item.ORIGIN).concat(")");
      dest_key = item.DEST_CITY_NAME.concat(" (").concat(item.DEST).concat(")");

      // console.log(origin_key);
      if(i <= -1 && !origin_duplicate.includes(origin_key)){
        // originArr.push({id: item.ORIGIN, name: item.ORIGIN_CITY_NAME});
        origin_duplicate.push(origin_key);
        originArr.push({id: item.ORIGIN, name: origin_key});
      }
      if(j <= -1 && !dest_duplicate.includes(dest_key)){
        dest_duplicate.push(dest_key);
        destArr.push({id: item.DEST, name: dest_key});
      }
    });
   
    originArr.sort((a, b) => (a.name > b.name) ? 1 : -1);
    destArr.sort((a, b) => (a.name > b.name) ? 1 : -1);
    // originArr.sort((a,b) => (a.ORIGIN_CITY_NAME > b.ORIGIN_CITY_NAME) ? 1 : ((b.ORIGIN_CITY_NAME > a.ORIGIN_CITY_NAME) ? -1 : 0));
    // destArr.sort();
    var target = $('#origin');
    $(target).empty();
    $('<option>-- Select --</option>').appendTo(target);
    $.each(originArr , function(value,index) {
           $('<option value="' + index.id + '">' + index.name + '</option>').appendTo(target);
                });
   
    var targetDest = $('#destination');
    $(targetDest).empty();
    $('<option>-- Select --</option>').appendTo(targetDest);
    $.each(destArr , function(value,index) {
       $('<option value="' + index.id + '">' + index.name + '</option>').appendTo(targetDest);
    });
    $('#origin, #destination').change(function() {    
      // $("flight").on("submit",function(){  
      d3.selectAll("svg > *").remove();
      var e = document.getElementById("origin");
      var origResult = e.options[e.selectedIndex].value;
      // alert(origResult);
      var d = document.getElementById("destination");
      var destResult = d.options[d.selectedIndex].value;
 
      if (origResult && destResult) {
        const itermediate = rawSample.filter(samp => {
          return (samp.ORIGIN == origResult && samp.DEST == destResult);
        });

        var temp = {};
        var obj = null;
        for(var i=0; i < itermediate.length; i++) {
           obj=itermediate[i];
           // console.log(obj.OP_UNIQUE_CARRIER);
           if (Object.keys(carrier_mapping).indexOf(obj.OP_UNIQUE_CARRIER) !== -1) {
             obj.OP_UNIQUE_CARRIER = carrier_mapping[obj.OP_UNIQUE_CARRIER];
           }
           var val = parseInt(obj.ARR_DELAY_NEW,10);
           if(Number.isNaN(val)==true){
            val = 0;
           }
           console.log(obj);
           if(!temp[obj.OP_UNIQUE_CARRIER]) {
               // obj.ARR_DELAY_NEW = [parseInt(obj.ARR_DELAY_NEW,10),1];
               obj.ARR_DELAY_NEW = val;
               obj["count"] = parseInt(1)
               temp[obj.OP_UNIQUE_CARRIER] = obj;
           } else {
               temp[obj.OP_UNIQUE_CARRIER].ARR_DELAY_NEW += val;
               temp[obj.OP_UNIQUE_CARRIER].count+=1;
           }
           // console.log(temp)
        }

        // Object.keys(temp).forEach(function(key){temp[key] = temp[key][0]/temp[key][1];});
        // var max_avg = Math.max.apply(Math, Object.values(temp));
        // alert(max_avg)
        // console.log(temp)

        // Object.keys(temp).forEach(function(key){temp[key] = temp[key][0]/temp[key][1];});
        var max_val = -1
        for (var carrier in temp) {
          var val = temp[carrier]['ARR_DELAY_NEW']/temp[carrier]['count']
          temp[carrier]['ARR_DELAY_NEW'] = val.toFixed(2);
          if(val > max_val){
            max_val = val;
          }
        }

    var sample = [];
    for (var prop in temp)
        sample.push(temp[prop]);
   
    const svg = d3.select('svg');
    const svgContainer = d3.select('#container');
   
    const margin = 80;
    const width = 1000 - 2 * margin;
    const height = 600 - 2 * margin;
   
    const chart = svg.append('g')
      .attr('transform', `translate(${margin}, ${margin})`);
   
    const xScale = d3.scaleBand()
      .range([0, width])
      .domain(sample.map((s) => s.OP_UNIQUE_CARRIER))
      .padding(0.4)
   
    if(max_val==-1){
      domain_val = 10;
    }
    else{
      domain_val = max_val*1.15;
    }
    const yScale = d3.scaleLinear()
      .range([height, 0])
      .domain([0, domain_val]);
   
    // vertical grid lines
    // const makeXLines = () => d3.axisBottom()
    //   .scale(xScale)
   
    const makeYLines = () => d3.axisLeft()
      .scale(yScale)
   
    chart.append('g')
      .attr('transform', `translate(0, ${height})`)
      .call(d3.axisBottom(xScale));
   
    chart.append('g')
      .call(d3.axisLeft(yScale));
   
    chart.append('g')
      .attr('class', 'grid')
      .call(makeYLines()
        .tickSize(-width, 0, 0)
        .tickFormat('')
      )
   
    const barGroups = chart.selectAll()
      .data(sample)
      .enter()
      .append('g')
   
    barGroups
      .append('rect')
      .attr('class', 'bar')
      .attr('x', (g) => xScale(g.OP_UNIQUE_CARRIER))
      .attr('y', height)
      .attr('height',0)
      .attr('width', xScale.bandwidth())
      .transition()
          .duration(2000)
          .attr('height', (g) => height - yScale(g.ARR_DELAY_NEW))
          // .attr('opacity', 1)
          .attr('x', (a) => xScale(a.OP_UNIQUE_CARRIER))
          .attr('y', (g) => yScale(g.ARR_DELAY_NEW))
          .attr('width', xScale.bandwidth())
      // .on('mouseenter', function(actual, i) {
      //   d3.selectAll('.value')
      //     .attr('opacity', 0)
   
      //   d3.select(this)
      //     .transition()
      //     .duration(3000)
      //     .attr('opacity', 0.6)
      //     .attr('x', (a) => xScale(a.OP_UNIQUE_CARRIER) - 5)
      //     .attr('width', xScale.bandwidth() + 10)
   
      //   const y = yScale(actual.ARR_DELAY_NEW)
   
      //   line = chart.append('line')
      //     .attr('id', 'limit')
      //     .attr('x1', 0)
      //     .attr('y1', y)
      //     .attr('x2', width)
      //     .attr('y2', y)
   
      //   barGroups.append('text')
      //     .attr('class', 'divergence')
      //     .attr('x', (a) => xScale(a.OP_UNIQUE_CARRIER) + xScale.bandwidth() / 2)
      //     .attr('y', (a) => yScale(a.ARR_DELAY_NEW) + 30)
      //     .attr('fill', 'white')
      //     .attr('text-anchor', 'middle')
      //     .text((a, idx) => {
      //       const divergence = (a.value - actual.value).toFixed(1)
   
      //       let text = ''
      //       if (divergence > 0) text += '+'
      //       text += `${divergence}`
   
      //       return idx !== i ? text : '';
      //     })
   
      // })
      // .on('mouseleave', function() {
      //   d3.selectAll('.value')
      //     .attr('opacity', 1)
   
      //   d3.select(this)
      //     .transition()
      //     .duration(3000)
      //     .attr('opacity', 1)
      //     .attr('x', (a) => xScale(a.OP_UNIQUE_CARRIER))
      //     .attr('width', xScale.bandwidth())
   
      //   chart.selectAll('#limit').remove()
      //   chart.selectAll('.divergence').remove()
      // })
   
    // barGroups
    //   .append('text')
    //   .attr('class', 'value')
    //   .attr('x', (a) => xScale(a.OP_UNIQUE_CARRIER) + xScale.bandwidth() / 2)
    //   .attr('y', (a) => yScale(a.ARR_DELAY_NEW) + 30)
    //   .attr('text-anchor', 'middle')
    //   .text((a) => `${a.ARR_DELAY_NEW}`)
   
    svg
      .append('text')
      .attr('class', 'label')
      .attr('x', -(height / 2) - margin)
      .attr('y', margin / 2.4)
      .attr('transform', 'rotate(-90)')
      .attr('text-anchor', 'middle')
      .text('Average Arrival Delay (Mintues)')
   
    // svg.append('text')
    //   .attr('class', 'label')
    //   .attr('x', width / 2 + margin)
    //   .attr('y', height + margin * 1.7)
    //   .attr('text-anchor', 'middle')
    //   .text('Flights')
   
    svg.append('text')
      .attr('class', 'title')
      .attr('x', width / 2 + margin)
      .attr('y', 40)
      .attr('text-anchor', 'middle')
      // .text('Flights with their delays')
    }
    })
    });
    </script>
      
    <style type="text/css">
      body {
  font-family: 'Open Sans', sans-serif;
}

div#layout {
  text-align: center;
}

div#container {
  width: 1000px;
  height: 600px;
  margin: auto;
  background-color: #E1E5EA;
}

svg {
  width: 100%;
  height: 100%;
}

.bar {
  fill: #236AB9;
}

text {
  font-size: 12px;
  fill: (0,0,0);
}

path {
  stroke: black;
}

line {
  stroke: black;
}

line#limit {
  stroke: #FED966;
  stroke-width: 3;
  stroke-dasharray: 3 6;
}

.grid path {
  stroke-width: 0;
}

.grid .tick line {
  stroke: #9FAAAE;
  stroke-opacity: 0.3;
}

text.divergence {
  font-size: 14px;
  fill: #2F4A6D;
}

text.value {
  font-size: 14px;
  fill: white !important;
}

text.title {
  font-size: 22px;
  font-weight: 600;
}

text.label {
  font-size: 14px;
  font-weight: 400;
}

text.source {
  font-size: 10px;
}


    </style>
    <link href="https://fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet">
    <script src="https://d3js.org/d3.v5.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.0/jquery.min.js"></script>
    
    <script type="text/javascript" src="https://raw.githubusercontent.com/bwliv/thanksgivingflights/master/webfiles/str_thanksgiving.json"> </script>